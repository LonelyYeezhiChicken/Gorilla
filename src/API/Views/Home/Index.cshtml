@{
    ViewData["Title"] = "Gorilla";
}

<div class="container gorilla">
    <h1 class="text-center">猩猩點燈</h1>
    <div id="game" class="row"></div>
    <div class="row justify-content-center">
        <div class="col-sm-8">
            <div id="result" class="text-center"></div>
        </div>
    </div>

    <div class="row justify-content-center m-3">
        <div class="col-sm-8">
            <button class="btn btn-secondary mr-2" onclick="fillInput('呼叫大猩猩')">呼叫大猩猩</button>
            <button class="btn btn-secondary" onclick="fillInput('猩猩數香蕉')">猩猩數香蕉</button>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-sm-8">
            <div class="input-group mb-3">
                <label class="input-group-text" for="something">請輸入指令:</label>
                <input type="text" id="something" class="form-control">
                <div class="input-group-append">
                    <button class="btn btn-primary" onclick="submitForm()">執行</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/phaser3/phaser.min.js"></script>
<script>
    // 創建遊戲配置
    var config = {
      type: Phaser.AUTO,
      width: 900,
      height: 430,
      parent: "game",
      scene: {
        preload: preload,
        create: create,
        update: update
      }
    };

    // 創建遊戲實例
    var game = new Phaser.Game(config);

     let gorilla;
     let banana;
     let badBanana;
     let isThrowing = false; //抛香蕉
     let throwStartX; // 抛香蕉的起始X
     let throwStartY; // 抛香蕉的起始Y
     let throwEndtX; // 抛香蕉的起始Y
     let throwDuration = 1000; // 抛香蕉時間（毫秒）
     let throwStartTime; // 抛香蕉的開始
     let speed = 1;
     let isWoof = false;
     let closeWoof = false;
     let isAttack = false;
     let closeAttack = false;
     let isFall = false;
     let tempFallSpeed = false;
    function preload() {
        this.load.image('background', '/assets/background.webp');
        this.load.image('badBanana', '/assets/badBanana.png');
        this.load.spritesheet('banana', '/assets/banana.png', { frameWidth: 20.5, frameHeight: 21 });
        this.load.spritesheet('gorilla', '/assets/gorilla.png', { frameWidth: 132, frameHeight: 102 });
    }
    
    function create() {
        this.add.image(0, 0, 'background').setOrigin(0, 0);        
        badBanana = this.add.image(-1500, -1500, 'badBanana').setOrigin(0, 0).setScale(0.5);
    
        // 添加gorilla sprite
        gorilla = this.add.sprite(0, 340, 'gorilla');
        gorilla.setOrigin(0, 0);

        banana = this.add.sprite(-1500, -1500, 'banana');
        banana.setOrigin(0, 0);
    
        this.anims.create({
            key: 'bananaAnimation',
            frames: this.anims.generateFrameNumbers('banana', { start: 0, end: 4 }),
            frameRate: 10,
            repeat: -1
        });
        
        this.anims.create({
            key: 'gorillaAnimation',
            frames: this.anims.generateFrameNumbers('gorilla', { start: 0, end: 5 }),
            frameRate: 10,
            repeat: -1
        });

        this.anims.create({
            key: 'gorillaAnimation2',
            frames: this.anims.generateFrameNumbers('gorilla', { start: 18, end: 24 }),
            frameRate: 10,
            repeat: -1
        });

        this.anims.create({
            key: 'gorillaAnimation3',
            frames: this.anims.generateFrameNumbers('gorilla', { start: 6, end: 10 }),
            frameRate: 10,
            repeat: -1
        });

        this.anims.create({
            key: 'gorillaAnimation4',
            frames: this.anims.generateFrameNumbers('gorilla', { start: 12, end: 17 }),
            frameRate: 10,
            repeat: -1
        });
    
        // 播放gorilla
        gorilla.play('gorillaAnimation');
    }

    function update(time, delta) {
        
        //轉向
        if(gorilla.x >= 850){
            gorilla.flipX = true;
            speed = -1;
        }else if(gorilla.x <= 50){
            gorilla.flipX = false;
            speed = 1;
        }
        
        // 吼叫
        if(isWoof){
            speed = 0;
            gorilla.play('gorillaAnimation2');
            isWoof = false;
        }

        // 攻擊
        if(isAttack){
            speed = 0;
            gorilla.play('gorillaAnimation3');
            
            badBanana.x = -1500;
            badBanana.y = -1500;

            banana.x = gorilla.x;
            banana.y = gorilla.y;
            banana.play('bananaAnimation');

            isAttack = false;
        }

        // 停止吼叫或攻擊
        if(closeWoof || closeAttack){
           gorilla.play('gorillaAnimation');           
           closeWoof = false; 
           closeAttack = false;
        }        

        // 丟香蕉
        if (isThrowing) {
            // 计算抛香蕉的時間
            let progress = (time - throwStartTime) / throwDuration;
            if (progress > 1) {
                // 抛香蕉结束
                isThrowing = false;
                banana.x = -1500;
                banana.y = -1500;
            } else {
                // 計算算抛香蕉的位置
                let throwX = throwStartX + (gorilla.flipX ? -1 : 1) * progress * 400;
                let throwY = throwStartY + 4 * progress * (400 - throwStartY) * progress;
                banana.x = throwX;
                banana.y = throwY;

                if(throwY >= 430 && throwY <= 435){
                    throwEndtX = throwX;
                }

                if (throwY >= 430) {
                    // 切换香蕉
                    banana.setVisible(false);
                    badBanana.x = throwEndtX;
                    badBanana.y = 400;
                }
            }
        }

        // 滑倒
        if(gorilla.x >= badBanana.x - 50 && gorilla.x <= badBanana.x + 10){
            startFall();
        }

        if (isFall) {
           // 計算跌倒的時間
           let progress = (time - throwStartTime) / (throwDuration - 500);
           if (progress > 1) {
               // 跌倒結束
               isFall = false;
               speed = tempFallSpeed;
               gorilla.play('gorillaAnimation');
            }
        }
        

        gorilla.x += speed;
    }

    function startFall(){
        if (!isFall) {
            isFall = true;
            tempFallSpeed = speed;
            speed = 0;
            badBanana.x = -1500;
            badBanana.y = -1500;
            throwStartTime = performance.now();
            gorilla.play('gorillaAnimation4');
        }
    }

    function throwBanana() {
        if (!isThrowing) {
            throwStartX = gorilla.x;
            throwStartY = gorilla.y;
            throwStartTime = performance.now();
            isThrowing = true;
            banana.setVisible(true);
            banana.play('bananaAnimation');
        }
    }

    /**---- 其餘JS ----*/

    function submitForm() {
        var something = document.getElementById("something").value;
        var result = document.getElementById("result");

        let tempSpeed = speed;
        isWoof = true;
        fetch('/api/gorilla/todo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(something)
        })
         .then(response => response.text())
         .then(data => {
             result.textContent = data;

             setTimeout(()=>{
                closeWoof = true;
                speed = tempSpeed;
             }, 2000);
         })
         .catch(error => {
             console.error('Error:', error);
             result.textContent = "發生錯誤";
         });
    }

    function fillInput(value) {
        let tempSpeed = speed;
        isAttack = true;
        throwBanana();
        document.getElementById("something").value = value;

        setTimeout(()=>{
           closeAttack = true;
           speed = tempSpeed;
        }, 500);
    }
</script>
